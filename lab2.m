clc;
%ЛАБОРАТОРНА БОРЦЯ МИХАЙЛА #2
function [y]=g(t, x)
  y=cos(t)-2*t*sin(t)+2*t*x;
end

% Точное решение
function [x,y]= fi ( a , b , n )
h=(b-a ) /n ;
disp(a)
x(1)=a;
y(1)= (sin(x(1)))+(e^(x(1)^2));
for i =2:n+1
x(i)=x(i-1)+h;
y(i)= (sin(x(i)))+(e^(x(i)^2));
t ( i )=a+(i-1)*h ;
end 

end
function [x , t , j ]=kut_merson(a ,b,n, eps, x0) % Функция решения задачи Коши x?(t) = g(t,x) x(a) = x0 методом % Кутта-Мерсона на интервале интегрирования [a,b] c точностью eps, % n — количество отрезков, на которые вначале разбивается интервал [a,b]. h=(b?a)/n; % Вычисление шага h. x(1)=x0 ; t (1)=a ; i =2; while ( t ( i ?1)+h)<=b R=3?eps ; while R>eps % Расчёт коэффициентов K1, K2, K3, K4, K5. K1=g( t ( i ?1) ,x( i ?1)) ; K2=g( t ( i ?1)+h/3 ,x( i ?1)+h/3?K1) ; K3=g( t ( i ?1)+h/3 ,x( i ?1)+h/6?K1+h/6?K2) ; K4=g( t ( i ?1)+h/2 ,x( i ?1)+h/8?K1+3?h/8?K2) ; K5=g( t ( i ?1)+h, x( i ?1)+h/2?K1?3?h/2?K3+2?h?K4) ; % Вычисление сравниваемых значений x(i+1)
% n — количество отрезков, на которые вначале разбивается интервал [a,b].
 h=(b-a)/n; % Вычисление шага h. 
 x(1)=x0 ; 
 t (1)=a ; 
 i =2; 
 while ( t ( i -1)+h)<=b 
   R=3*eps ; 
   while R>eps % Расчёт коэффициентов K1, K2, K3, K4, K5. 
     K1=g( t (i-1) ,x(i-1)) ; 
     K2=g( t (i-1)+h/3 ,x(i-1)+h/3*K1) ; 
     K3=g( t (i-1)+h/3 ,x(i-1)+h/6*K1+h/6*K2) ; 
     K4=g( t (i -1)+h/2 ,x(i-1)+h/8*K1+3*h/8*K2) ;
     K5=g( t (i -1)+h, x(i-1)+h/2*K1-3*h/2*K3+2*h*K4) ; % Вычисление сравниваемых значений x(i+1)
     X1=x( i-1)+h/2*(K1-3*K3+4*K4) ; X2=x(i-1)+h/6*(K1+4*K4+K5) ; % Вычисление оценочного коэффициента R. 
     R=0.2*abs(X1-X2) ; % Сравнение оценочного коэффициента R с точностью eps. 
     if R>eps 
       h=h/2; 
     else % Если оценочный коэффициент R меньше точности eps, % то происходит формирование очередной найденной точки и % переход к следующему этапу по i. 
       t ( i )=t(i-1)+h; 
       x( i )=X2; 
       i=i+1; % Если оценочный коэффициент R меньше eps/64, % то можно попробовать увеличить шаг. 
       if R<=eps/64 
         if ( t(i -1)+2*h)<=b 
           h=2*h; 
         end 
        end 
      end
   end
end % В переменной j возвращается количество элементов в массивах x и t 
j=i-1
end
% Функция решения задачи Коши методом Рунге-Кутта.
function [ x , t ]= runge_kut ( a , b , n , x0 )
h=(b-a ) /n ;
x ( 1 )=x0 ;
for i =1:n+1
  t ( i )=a+(i-1)*h ;
end
for i =2:n+1
K1=g ( t ( i-1) , x ( i-1) ) ;
K2=g ( t ( i-1)+h / 2 , x ( i-1)+h/2*K1) ;
K3=g ( t ( i-1)+h / 2 , x ( i-1)+h/2*K2) ;
K4=g ( t ( i-1)+h , x ( i-1)+h*K3) ;
delt=h / 6*(K1+2*K2+2*K3+K4) ;
x ( i )=x ( i-1)+delt ;
end
end
par=odeset ("RelTol" , 1e-5, "AbsTol" , 1e-5, 'InitialStep' ,0.025 , 'MaxStep' ,0.01) ;
[X23,Y23]=ode23(@g,[0 1], [1] , par )
par=odeset ("RelTol" , 1e-4, "AbsTol" ,1e-4,'InitialStep' ,0.05 , ' MaxStep' ,0.2) ;
[X45,Y45]=ode45(@g,[0 1], [1] , par )
% Решение дифференциального уравнения методом Рунге-Кутта.
[YR,XR]= runge_kut ( 0 , 1 , 100 , 1) ;
% Точное решение.
[x1, y1]= fi ( 0 , 1 , 100 ) ;
[YK,XK]= kut_merson ( 0 , 1 , 100 ,  0.01, 1) ;
%x1 = 0 : 0.05: 1 ; 
%y1= fi ( x1 ) ;

plot ( x1, y1, '-r; exact solution ;', X23,Y23, '>p; ODE23;', X45,Y45, '<b; ODE45;') ;
figure ( ) ;
plot ( x1, y1, '-r; exact solution ;', XR,YR, '>b; runge-kut;', XK,YK, '<p; Kut-Merson;') ;
#figure ( ) ;
